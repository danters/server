#!/usr/bin/python
# -*- coding: UTF-8 -*-
import sys
sys.path.insert(0, "/srv/www/devweb/batch")
import HCommon
import HBook
import AWSEmail
import datetime
import time
import calendar
import pytz

supportEmail = "support@valetanywhere.com"

def dbDateToEST_String(utcStr):
    gmt = pytz.timezone('UTC')
    eastern = pytz.timezone('US/Eastern')
    utcTime = utcStr + " UTC"

    utcDate = datetime.datetime.strptime(utcTime, '%Y-%m-%d %H:%M UTC')
    dategmt = gmt.localize(utcDate)
    dateeastern = dategmt.astimezone(eastern)
    estTime = str(dateeastern)
    estTime = estTime[:16]
    return estTime

def dbDateToEST(utcStr):
    gmt = pytz.timezone('UTC')
    eastern = pytz.timezone('US/Eastern')
    utcTime = utcStr + " UTC"

    utcDate = datetime.datetime.strptime(utcTime, '%Y-%m-%d %H:%M UTC')
    dategmt = gmt.localize(utcDate)
    dateeastern = dategmt.astimezone(eastern)
    return dateeastern

def mainProcess():
    garageMap = {}
    garages=HCommon.execProcManyRow("call ReadAllDistinctGarages()",())
    for g in garages:
        garageMap[str(g[0])]= g

    tasks=HCommon.execProcManyRow("call ReadAllActiveVaultTasks()",())
    now = datetime.datetime.utcnow()
    sNow = str(now)
    sNow = sNow[:16]
    nowEST_str = dbDateToEST_String(sNow)
    nowESTDate = nowEST_str[:10]
    nowESTTime = nowEST_str[11:]
    
    stdTime = toStdTime(nowESTTime)
    
    nowEST = dbDateToEST(sNow)
    tomorrowDate = nowEST + datetime.timedelta(days=1)
    sTomorrowDate = str(tomorrowDate)
    nextDayDate = sTomorrowDate[:10]

    print "Now & Tomorrow's Date: " + nowESTDate + ", " + nextDayDate + ", nowESTTime=" + nowESTTime

    if nowESTTime=="06:00":
        processTodaysTasks(tasks, garageMap, nowESTDate, stdTime)
    
    if nowESTTime=="18:00":
        processDayReminder(tasks, nextDayDate)
    
    processExpired(tasks, garageMap, nowEST, nowESTDate, stdTime)
    
    processThreeHoursReminder(tasks, nowEST, nowESTDate)

    return

def toStdTime(milTime):
    sHr = milTime[:2]
    hr = int(sHr)
    if hr > 12:
        hr = hr - 12
        return str(hr) + milTime[2:] + " PM"
    else:
        return milTime + " AM"

def processDayReminder(tasks, nextDayDate):
    for t in tasks:
        taskOn = dbDateToEST_String(t[2])
        taskOnDate = taskOn[:10]
        
        if taskOnDate==nextDayDate:
            taskOnTime = taskOn[11:]
            stdTime = toStdTime(taskOnTime)
            
            #time.strftime("%I:%M %p", time.gmtime(t))

            lat = t[3]
            lng = t[4]
            meetupLoc = HBook.getAddressFromLatLng(lat, lng)
            email = t[12]
            make = t[6]
            model = t[7]
            firstName = t[9]
            taskType = t[1]
            
            sendDayReminder(email,firstName,taskType,make,model,meetupLoc,stdTime)
    return

def processThreeHoursReminder(tasks, nowEST, nowESTDate):
    sNow = str(nowEST)
    sNow = sNow[:16]
    #sNow = "2014-10-22 18:10"
    
    fmt = '%Y-%m-%d %H:%M'
    d1 = datetime.datetime.strptime(sNow, fmt)

    # convert to unix timestamp
    d1_ts = time.mktime(d1.timetuple())

    # they are now in seconds, subtract and then divide by 60 to get minutes.
    
    for t in tasks:
        taskOn = dbDateToEST_String(t[2])
        d2 = datetime.datetime.strptime(taskOn, fmt)
        d2_ts = time.mktime(d2.timetuple())
        
        print "--------" + taskOn + " ||||  " + sNow
        minsAhead =  int(d1_ts-d2_ts) / 60
        
        if minsAhead == 180:
            print "-------- sending 3 hour reminder to " + str(t)
            taskOnTime = taskOn[11:]
            stdTime = toStdTime(taskOnTime)
            lat = t[3]
            lng = t[4]
            meetupLoc = HBook.getAddressFromLatLng(lat, lng)
            email = t[12]
            make = t[6]
            model = t[7]
            firstName = t[9]
            taskType = t[1]
            
            sendThreeHoursReminder(email,firstName,taskType,make,model,meetupLoc,stdTime)

    return

def buildTodayRow(g, t, taskOnTime):
    garageAddress = ""
    garageName = g[1]
    garagePhone = g[4]
    garageAddress = g[5]
    garageLotNum = str(t[14])
    carInfo = str(t[13]) + " " + t[6] + " " + t[7]

    lat = t[3]
    lng = t[4]
    meetupLoc = HBook.getAddressFromLatLng(lat, lng)

    sType = "For Parking"
    if t[1]==2:
        sType = "Bring Car to Customer"

    row = "<tr><td>" +  taskOnTime + "</td><td>" + sType + "</td><td>" + t[9] + " " + str(t[10]) + "</td><td>" + str(t[11]) + "</td><td>" + carInfo + "</td><td>" + str(meetupLoc) + "</td><td>" + garageName + "</td><td>" + str(garagePhone) + "</td><td>" + garageLotNum + "</td><td>" + garageAddress + "</td></tr>"
    
    return row

def processTodaysTasks(tasks, garageMap, nowESTDate, nowESTTime):
    #nowESTDate = "2014-10-22"
    allRows = ""
    numTasks = 0
    hasReturn = False
    for t in tasks:
        taskOn = dbDateToEST_String(t[2])
        taskOnDate = taskOn[:10]

        if taskOnDate==nowESTDate:
            taskOnTime = taskOn[11:]
            stdTime = toStdTime(taskOnTime)

            g = garageMap[str(t[8])]
            row = buildTodayRow(g, t, stdTime)
            allRows += row + "\n"
            numTasks=numTasks+1
            if t[1]==2:
                hasReturn = True
            
            
    #print allRows
    
    emailTodaysTasksToSupport(nowESTDate,nowESTTime,str(numTasks),allRows,hasReturn)
    return

def processExpired(tasks, garageMap, nowEST, nowESTDate, nowESTTime):
    #nowESTDate = "2014-10-22"
    allRows = ""
    numTasks = 0
    hasReturn = False
    print "processing expired " + str(nowEST) + " , " + nowESTDate
    for t in tasks:
        taskOnEST = dbDateToEST(t[2])
        taskOn = dbDateToEST_String(t[2])
        taskOnDate = taskOn[:10]

        if (taskOnEST < nowEST) and (taskOnDate==nowESTDate):
            print "--------- " + str(taskOnEST) + " <<<<<<<<<< " +  str(nowEST) + " , "  + taskOnDate + "=========" + nowESTDate
            taskOnTime = taskOn[11:]
            stdTime = toStdTime(taskOnTime)
            g = garageMap[str(t[8])]
            row = buildTodayRow(g, t, stdTime)
            allRows += row + "\n"
            numTasks=numTasks+1
            if t[1]==2:
                hasReturn = True
            
    #print allRows
    
    if numTasks > 0:
        emailExpiredTasksToSupport(nowESTDate,nowESTTime,str(numTasks),allRows,hasReturn)
        
    return

def sendDayReminder(email,firstName,taskType,make,model,location,taskTime):
    templatePath = HCommon.getTemplatePath()
    fp = open(templatePath + 'periodicVaultDayCustomerReminder.html', 'r')

    msg = fp.read()
    fp.close()
    
    taskDesc = "meet you to park your " + make + " " + model
    subject = " REMINDER: ValetAnywhere Vault - Car dropoff tomorrow"
    if taskType == 2:
        taskDesc = "bring your " + make + " " + model + " to you"
        subject = "REMINDER: ValetAnywhere Vault - Car return tomorrow"
    
    msg = replaceVariables(msg, (firstName,taskDesc,location,taskTime))

    if HCommon.isDev():
        AWSEmail.sendemail(supportEmail, "Dev - " + subject, msg)
    else:
        AWSEmail.sendemail(supportEmail, subject, msg)
    return

def sendThreeHoursReminder(email,firstName,taskType,make,model,location,taskTime):
    templatePath = HCommon.getTemplatePath()
    fp = open(templatePath + 'periodicVaultThreeHourCustomerReminder.html', 'r')

    msg = fp.read()
    fp.close()
    
    taskDesc = "meet you to park your " + make + " " + model
    subject = " REMINDER: ValetAnywhere Vault - Car dropoff in 3 hours"
    if taskType == 2:
        taskDesc = "bring your " + make + " " + model + " to you"
        subject = "REMINDER: ValetAnywhere Vault - Car return in 3 hours"
    
    msg = replaceVariables(msg, (firstName,taskTime,taskDesc,location))

    if HCommon.isDev():
        AWSEmail.sendemail(supportEmail, "Dev - " + subject, msg)
    else:
        AWSEmail.sendemail(supportEmail, subject, msg)
    return


def replaceVariables(txt, vars):
    for var in vars:
        txt = txt.replace("#VANY#", var, 1)
    return txt
    
def emailTodaysTasksToSupport(currentDate, asOfTime, numTasks, allRows,hasReturn):
    templatePath = HCommon.getTemplatePath()
    fp = open(templatePath + 'periodicVaultDaily.html', 'r')

    msg = fp.read()
    fp.close()
    
    returnText = ""
    if hasReturn == True:
        returnText = "Note that today, there are returns. PLEASE call the garage so they know to get the car out first before our valet arrives."
    
    msg = replaceVariables(msg, (currentDate, asOfTime, numTasks, allRows,returnText))

    if HCommon.isDev():
        AWSEmail.sendemail(supportEmail, "Dev - Today's Vault Tasks "+" ("+currentDate+")", msg)
    else:
        AWSEmail.sendemail(supportEmail, "Today's Vault Tasks "+" ("+currentDate+")", msg)
            
def emailExpiredTasksToSupport(currentDate, asOfTime, numTasks, allRows,hasReturn):
    templatePath = HCommon.getTemplatePath()
    fp = open(templatePath + 'periodicVaultUrgent.html', 'r')

    msg = fp.read()
    fp.close()
    

    returnText = ""
    if hasReturn == True:
        returnText = "Note that there are returns. PLEASE also call the garage so they know to get the car out first before our valet arrives."

    msg = replaceVariables(msg, (numTasks, allRows, returnText))

    if HCommon.isDev():
        AWSEmail.sendemail(supportEmail, "Dev - URGENT - UNASSIGNED VAULT TASK(S) TODAY "+" (as of "+currentDate+ " " + asOfTime + ")", msg)
    else:
        AWSEmail.sendemail(supportEmail, "URGENT - UNASSIGNED VAULT TASK(S) TODAY "+" (as of "+currentDate+ " " + asOfTime +")", msg)
    return

def processDaily():
#    <tr>
#        <td>11:30AM</td>
#        <td>For Parking</td>
#        <td>John Doe</td>
#        <td>2122341213</td>
#        <td>399 Park Ave</td>
#        <td>6th Ave Icon Parking</td>
#        <td>Garage Location</td>
#    </tr>
    return

mainProcess()